version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - proxy
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TZ=${TZ}
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/config:/config
      - ./letsencrypt:/letsencrypt
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${COOKIE_DOMAIN}`)"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth-github@file"

  plex:
    image: lscr.io/linuxserver/plex:latest
    container_name: plex
    restart: unless-stopped
    networks:
      - proxy
      - media
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - VERSION=docker
    volumes:
      - ./docker/plex:/config
      - ./media/tv:/tv
      - ./media/movies:/movies
      - ./media/music:/music
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.plex.entrypoints=websecure"
      - "traefik.http.routers.plex.rule=Host(`plex.${COOKIE_DOMAIN}`)"
      - "traefik.http.services.plex.loadbalancer.server.port=32400"

  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    restart: unless-stopped
    networks:
      - proxy
      - media
      - downloads
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./docker/sonarr:/config
      - ./media/tv:/tv
      - ./media/downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sonarr.entrypoints=websecure"
      - "traefik.http.routers.sonarr.rule=Host(`${SONARR_HOST}`)"
      - "traefik.http.routers.sonarr.middlewares=auth-github@file"
      - "traefik.http.services.sonarr.loadbalancer.server.port=8989"

  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    restart: unless-stopped
    networks:
      - proxy
      - media
      - downloads
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./docker/radarr:/config
      - ./media/movies:/movies
      - ./media/downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.radarr.entrypoints=websecure"
      - "traefik.http.routers.radarr.rule=Host(`${RADARR_HOST}`)"
      - "traefik.http.routers.radarr.middlewares=auth-github@file"
      - "traefik.http.services.radarr.loadbalancer.server.port=7878"

  lidarr:
    image: lscr.io/linuxserver/lidarr:latest
    container_name: lidarr
    restart: unless-stopped
    networks:
      - proxy
      - media
      - downloads
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./docker/lidarr:/config
      - ./media/music:/music
      - ./media/downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.lidarr.entrypoints=websecure"
      - "traefik.http.routers.lidarr.rule=Host(`${LIDARR_HOST}`)"
      - "traefik.http.routers.lidarr.middlewares=auth-github@file"
      - "traefik.http.services.lidarr.loadbalancer.server.port=8686"

  readarr:
    image: lscr.io/linuxserver/readarr:develop
    container_name: readarr
    restart: unless-stopped
    networks:
      - proxy
      - media
      - downloads
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./docker/readarr:/config
      - ./media/books:/books
      - ./media/downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.readarr.entrypoints=websecure"
      - "traefik.http.routers.readarr.rule=Host(`${READARR_HOST}`)"
      - "traefik.http.routers.readarr.middlewares=auth-github@file"
      - "traefik.http.services.readarr.loadbalancer.server.port=8787"

  bazarr:
    image: lscr.io/linuxserver/bazarr:latest
    container_name: bazarr
    restart: unless-stopped
    networks:
      - proxy
      - media
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./docker/bazarr:/config
      - ./media/movies:/movies
      - ./media/tv:/tv
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bazarr.entrypoints=websecure"
      - "traefik.http.routers.bazarr.rule=Host(`${BAZARR_HOST}`)"
      - "traefik.http.routers.bazarr.middlewares=auth-github@file"
      - "traefik.http.services.bazarr.loadbalancer.server.port=6767"

  prowlarr:
    image: lscr.io/linuxserver/prowlarr:latest
    container_name: prowlarr
    restart: unless-stopped
    networks:
      - proxy
      - downloads
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ./docker/prowlarr:/config
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prowlarr.entrypoints=websecure"
      - "traefik.http.routers.prowlarr.rule=Host(`${PROWLARR_HOST}`)"
      - "traefik.http.routers.prowlarr.middlewares=auth-github@file"
      - "traefik.http.services.prowlarr.loadbalancer.server.port=9696"

  qbittorrent:
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    restart: unless-stopped
    networks:
      - proxy
      - downloads
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - WEBUI_PORT=8080
    volumes:
      - ./docker/qbittorrent:/config
      - ./media/downloads:/downloads
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.qbit.entrypoints=websecure"
      - "traefik.http.routers.qbit.rule=Host(`${QBIT_HOST}`)"
      - "traefik.http.routers.qbit.middlewares=auth-github@file"
      - "traefik.http.services.qbit.loadbalancer.server.port=8080"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - proxy
      - monitoring
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${COOKIE_DOMAIN}`)"
      - "traefik.http.routers.prometheus.middlewares=auth-github@file"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    restart: unless-stopped
    networks:
      - proxy
      - monitoring
    volumes:
      - ./alertmanager:/etc/alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.alerts.entrypoints=websecure"
      - "traefik.http.routers.alerts.rule=Host(`alerts.${COOKIE_DOMAIN}`)"
      - "traefik.http.routers.alerts.middlewares=auth-github@file"
      - "traefik.http.services.alerts.loadbalancer.server.port=9093"

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    networks:
      - monitoring
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: cadvisor
    restart: unless-stopped
    networks:
      - monitoring
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro

  oauth2-proxy:
    image: quay.io/oauth2-proxy/oauth2-proxy:latest
    container_name: oauth2-proxy
    restart: unless-stopped
    networks:
      - proxy
    environment:
      - OAUTH2_PROXY_PROVIDER=github
      - OAUTH2_PROXY_CLIENT_ID=${GITHUB_CLIENT_ID}
      - OAUTH2_PROXY_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}
      - OAUTH2_PROXY_COOKIE_SECRET=${AUTH_SECRET}
      - OAUTH2_PROXY_COOKIE_DOMAIN=${COOKIE_DOMAIN}
      - OAUTH2_PROXY_EMAIL_DOMAINS=*
      - OAUTH2_PROXY_GITHUB_USERS=${AUTH_WHITELIST}
      - OAUTH2_PROXY_HTTP_ADDRESS=:4180
      - OAUTH2_PROXY_COOKIE_SECURE=true
      - OAUTH2_PROXY_UPSTREAMS=file:///dev/null
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:4180/ping"]
      interval: 30s
      timeout: 5s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.oauth.rule=Host(`auth.${COOKIE_DOMAIN}`)"
      - "traefik.http.routers.oauth.entrypoints=websecure"
      - "traefik.http.routers.oauth.tls=true"
      - "traefik.http.services.oauth.loadbalancer.server.port=4180"

networks:
  proxy:
    name: proxy
  media:
    name: media
  downloads:
    name: downloads
  monitoring:
    name: monitoring
  vlan20:
    external: true

volumes:
  prometheus_data:
  alertmanager_data:
 